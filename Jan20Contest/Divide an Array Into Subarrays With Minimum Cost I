/*
You are given an array of integers nums of length n.

The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.

You need to divide nums into 3 disjoint contiguous subarrays.

Return the minimum possible sum of the cost of these subarrays.
Example 1:
Input: nums = [1,2,3,12]
Output: 6
Explanation: The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.
The other possible ways to form 3 subarrays are:
- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.
- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.*/

//method-1:
public int minimumCost(int[] nums) { 
   int n = nums.length; 
   int a=nums[0];
   Arrays.sort(nums,1,n);
   return a+nums[1]+nums[2];
}

//method-2:
public int minimumCost(int[] nums) {
        int n = nums.length; 
        int smallest = Integer.MAX_VALUE; 
        int i1=0,i2=0;
        
        for (int i = 0; i < n; i++) { 
            if (nums[i] < smallest) { 
                smallest = nums[i];
                i1=i;
            } 
        } 
        
        int second_smallest = Integer.MAX_VALUE;      
        for (int i = 0; i < n; i++) { 
            if (nums[i] < second_smallest && i!=i1) { 
                second_smallest = nums[i]; 
                i2=i;
            } 
        } 
        
        int maxi=Math.max(i1,i2);
        int mini=Math.min(i1,i2);
        
        int third=Integer.MAX_VALUE;
        
        if(mini>0)
        {
            return smallest+second_smallest+nums[0];
        }   
        else
        {
            for(int i=mini+1;i<n;i++)
            {
                if(nums[i]<third && i!=maxi)
                    third=nums[i];
            }
            return smallest+second_smallest+third;
        }
}
